name: OpenWrt-ARM-CI-1

on:
  repository_dispatch:
  release:
    types: published
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      clean:
        description: 'clean ccache'
        default: 'false'
        
  push:
    branches:
      - master
    paths:
      - '.github/n1.config'
      - '.github/config1'
      - '.github/workflows/build-ARM-CI.yml'
  schedule:
    - cron: 0 8 * * 5
  watch:
    types: started
    
env:
  TZ: 'Asia/Shanghai'
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
jobs:
  

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 1000
    
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Install depends
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync uuid-runtime dosfstools btrfs-progs mount util-linux parted
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone $TZ

      - name: Clone Lean's openwrt
        run: |
          git clone  --depth 1 https://github.com/coolsnowwolf/lede

      - name: Install feeds & Make config
        env:
          CONFIG: '.github/config1'
          
        run: |
          chmod 777 $CONFIG
          ./$CONFIG

      - name: Cache
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          toolchain: 'true'
          clean:  ${{github.event.inputs.clean}}
          prefix: ${{ github.workspace }}/lede
          
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Compile openwrt
        run: |
          cd lede
          make download -j8
          #暂时修复dockerd的runc依赖
          #rm -rf ./feeds/packages/utils/runc/Makefile
          #svn export https://github.com/openwrt/packages/trunk/utils/runc/Makefile ./feeds/packages/utils/runc/Makefile
          #sed -i 's/^\s*$[(]call\sEnsureVendoredVersion/#&/' ./feeds/packages/utils/dockerd/Makefile
          make -j$(nproc) || make -j1 V=s
          #make -j1 V=s

      - name: Build firmware
        run: |
          #echo 'WHOAMI=muxinghe' > whoami
          pwd=`pwd -P`
          sed -i "s:/opt:$pwd:g" make.env
          sed -i -e "s@HW_FLOWOFFLOAD=0@HW_FLOWOFFLOAD=1@g" mk_s905x3_multi.sh
          sed -i -e "s/活雷锋/muxinghe/g" make.env
          #sed -i -e "/5.4/d" make.env
          #sed -i -e "/5.10/d" make.env
          #sed -i -e "s/#KERNEL/KERNEL/g" make.env
          sed -i -e "s@#FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3-oc.dtb@FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3-oc.dtb@g" mk_s905x3_multi.sh
          #sed -i -e "s@FDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb@#FDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb@g" mk_s905x3_multi.sh
          sed -i -e "s/ENABLE_WIFI_K510=0/ENABLE_WIFI_K510=1/g" make.env
          #sed -i 's/-flippy//g' make.env
          source make.env
          KV=$(echo "$KERNEL_VERSION" | cut -d '-' -f1)
          svn checkout https://github.com/breakings/OpenWrt/trunk/opt/kernel/$KV kernel
          cp lede/bin/targets/*/*/*.tar.gz ./openwrt-armvirt-64-default-rootfs.tar.gz
          #sudo -E mount -t tmpfs none $PWD/tmp
          sudo bash mk_s905d_n1.sh
          mv output out
          cd out
          #filename=$(ls | awk -F '.img' '{print $1}')
          sudo gzip *.img
          cd ..
          sudo bash mk_s905x3_multi.sh
          cd output
          sudo gzip *.img
          sudo cp *.gz ../out
          cd ..
          sudo mv *.gz ./out
          cd ./out
          echo "firmware_out=$OPENWRT_VER-K$KERNEL_VERSION" >> $GITHUB_ENV
          echo "firmware_out=$OPENWRT_VER-K$KERNEL_VERSION"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          
      - name: Upload firmware
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ env.firmware_out }}
          path: ${{ env.FIRMWARE }}
          
      - name: Upload firmware to wetransfer
        id: wetransfer
        if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
            curl -sL https://git.io/file-transfer | bash
            #./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
            ./transfer wet -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
            echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
            echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
  
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"
          
          
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: arm_${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
          
          
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3    
          
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
