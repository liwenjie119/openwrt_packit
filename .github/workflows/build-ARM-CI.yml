name: OpenWrt-ARM-CI

on:
  repository_dispatch:
  release:
    types: published
  workflow_dispatch:
    inputs:
      ifmake:
        description: 'build openwrt'
        default: 'true'
      clean:
        description: 'clean ccache'
        default: 'false'
        
  push:
    branches:
      - master
    paths:
      - '.github/n1.config'
      - '.github/diy.sh'
      - '.github/workflows/build-ARM-CI.yml'
  schedule:
    - cron: 0 0 * * 3,6
  watch:
    types: started
    
env:
  TZ: 'Asia/Shanghai'
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  IFMAKEOP: ${{github.event.inputs.ifmake}}
jobs:
  

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 1000
    
    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Install depends
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone $TZ

      - name: Clone Lean's openwrt
        run: |
          git clone  --depth 1 https://github.com/coolsnowwolf/lede

      - name: Install feeds & Make config
        env:
          CONFIG: '.github/diy.sh'
          
        run: |
          chmod 777 $CONFIG
          ./$CONFIG

      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: arm
          toolchain: 'true'
          clean:  ${{ github.event.inputs.clean }}
          prefix: ${{ github.workspace }}/lede
          

      - name: Compile openwrt or get rootfs
        id: compile
        run: |
          if [ "${{github.event.inputs.ifmake}}" != "false" ]
          then
            cd lede
            make download -j8
            make -j$(nproc) || make -j1 V=s
            cp bin/targets/*/*/*.tar.gz ./../openwrt-armvirt-64-default-rootfs.tar.gz
            cd ..
          else
            rootfs=$(wget -qO- -t1 -T2 "https://api.github.com/repos/liwenjie119/openwrt_packit/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
            wget https://github.com/liwenjie119/openwrt_packit/releases/download/$rootfs/openwrt-armvirt-64-default-rootfs.tar.gz
          fi
          [ -f "openwrt-armvirt-64-default-rootfs.tar.gz" ] && echo "status=success" >> $GITHUB_OUTPUT

      - name: Build firmware
        if: steps.compile.outputs.status == 'success' && !cancelled()
        env:
          OPENWRT_ARMVIRT: openwrt-armvirt-64-default-rootfs.tar.gz
          PACKAGE_SOC: s905d_s905x3
          KERNEL_VERSION_NAME: 5.15.104_6.1.21
          KERNEL_AUTO_LATEST: true
          GZIP_IMGS: .gz
          WHOAMI: muxinghe
        run: |
          sed -i -e "s@#FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3-oc.dtb@FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3-oc.dtb@g" mk_s905x3_multi.sh
          sed -i -e "s@FDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb@#FDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb@g" mk_s905x3_multi.sh
          bash openwrt_flippy.sh

          
      - name: Upload firmware
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ env.PACKAGED_OUTPUTDATE }}
          path: ${{ env.PACKAGED_OUTPUTPATH }}/*
          
      - name: Upload firmware to wetransfer
        id: wetransfer
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
            curl -sL https://git.io/file-transfer | bash
            #./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
            ./transfer wet -s -p 64 --no-progress ${{ env.PACKAGED_OUTPUTPATH }} 2>&1 | tee wetransfer.log
            echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
            echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
  
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
          
      - name: Upload firmware to release
        uses: ncipollo/release-action@v1
        if: steps.compile.outputs.status == 'success' && steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: arm_${{ steps.tag.outputs.release_tag }}
          bodyFile: release.txt
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3    
          
      - name: Remove old Releases
        uses: freenet-actions/delete-old-releases@v1
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          max-age: 'P8D'
          delete-tags: true
          token: '${{ github.token }}'
